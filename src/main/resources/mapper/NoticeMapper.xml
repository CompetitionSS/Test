<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- JAVA와 연결할 Mapper 파일 설정 -->
<mapper namespace="pcs.css.persistance.mapper.INoticeMapper">

	<!-- 게시판 리스트 쿼리 -->

	<select id="getNoticeList" parameterType="NoticeDTO" resultType="NoticeDTO">
		SELECT *
		FROM (
				 SELECT ROW_NUMBER() OVER (ORDER BY NOTICE_SEQ) NUM, N.*
				 FROM NOTICE N
				 WHERE REVIEW='N' OR REVIEW='n'
				 ORDER BY NOTICE_SEQ desc
			 )
		WHERE NUM BETWEEN #{start} AND #{finish}
		ORDER BY NOTICE_SEQ desc

	</select>
    <select id="getCommentsList" parameterType="NoticeDTO" resultType="CommentDTO">
		SELECT C.USER_ID, C.CONTENTS, C.CHG_DT,C.REF, C.REF_RANK
		FROM COMMENTS C
		WHERE NOTICE_SEQ = #{notice_seq}
		order by REF ASC, REF_RANK ASC
	</select>

	<select id="getReviewList" parameterType="NoticeDTO" resultType="NoticeDTO">
		SELECT *
		FROM (
				 SELECT ROW_NUMBER() OVER (ORDER BY NOTICE_SEQ) NUM, N.*
				 FROM NOTICE N
				 WHERE REVIEW='Y' OR REVIEW='y'
				 ORDER BY NOTICE_SEQ desc
			 )
		WHERE NUM BETWEEN #{start} AND #{finish}
		ORDER BY NOTICE_SEQ desc
	</select>
	
	<!-- 게시판 등록 쿼리 -->
	<insert id="InsertNoticeInfo" parameterType="NoticeDTO">
		INSERT INTO NOTICE
			(
				NOTICE_SEQ, TITLE, NOTICE_YN,READ_CNT,USER_ID,REG_DT, CONTENTS,
		      	REG_ID,REVIEW
			)
		VALUES(
			(SELECT NVL(MAX(A.NOTICE_SEQ),0)+1 FROM NOTICE A),
			#{title}, #{notice_yn},0,#{user_id},  SYSDATE, #{contents},#{user_id},'N'
		)
	</insert>
	<insert id="InsertComment" parameterType="CommentDTO">
		INSERT INTO COMMENTS
		(
			NOTICE_SEQ,USER_ID,CONTENTS,REG_DT,CHG_DT,COMMENT_SEQ, REF, REF_RANK
		)
		VALUES(
				  #{notice_seq}, #{user_id},#{contents},SYSDATE,SYSDATE,(SELECT NVL(MAX(A.COMMENT_SEQ),0)+1 FROM COMMENTS A),
		       #{ref},#{ref_rank}
			  )
	</insert>

	<insert id="InsertReviewInfo" parameterType="NoticeDTO"> /*리뷰 등록 쿼리*/
		INSERT INTO NOTICE
		(
			NOTICE_SEQ, TITLE, NOTICE_YN,READ_CNT,USER_ID,REG_DT, CONTENTS,
			REG_ID,REVIEW
		)
		VALUES(
					  (SELECT NVL(MAX(A.NOTICE_SEQ),0)+1 FROM NOTICE A),
					  #{title}, #{notice_yn},0,#{user_id},  SYSDATE, #{contents},#{user_id},'Y'
			  )
	</insert>
	
	<!-- 게시판 상세보기 쿼리 -->
	<select id="getNoticeInfo" resultType="NoticeDTO">
		SELECT N.NOTICE_SEQ, N.TITLE, N.NOTICE_YN, N.READ_CNT,  N.USER_ID,
			   CONTENTS, TO_CHAR(N.REG_DT, 'YYYY-MM-DD') AS REG_DT
	      FROM NOTICE N
	     WHERE N.NOTICE_SEQ = #{notice_seq}
	</select>
	<!--코멘트 찾기 쿼리-->
	<select id="commentcheck" resultType="CommentDTO">
		SELECT *
		FROM COMMENTS
		WHERE NOTICE_SEQ =#{notice_seq} and user_id = #{user_id} and ref = #{ref} and ref_rank = #{ref_rank}
	</select>
	<!-- 자유 게시판 페이징 카운트 -->
	<select id="noticeCount" parameterType="NoticeDTO" resultType="int">
		SELECT COUNT(*)
		FROM NOTICE N
		WHERE N.REVIEW='N' OR N.REVIEW='n'
	</select>
	<select id="reviewCount" parameterType="NoticeDTO" resultType="int">
		SELECT COUNT(*)
		FROM NOTICE N
		WHERE N.REVIEW='Y' OR N.REVIEW='y'
	</select>
	<select id="commentCount" parameterType="CommentDTO" resultType="int">
		SELECT COUNT(*)
		FROM comments
		WHERE notice_seq=#{notice_seq}
	</select>

	<!-- 조회수 증가 쿼리 -->
	<update id="updateNoticeReadCnt" parameterType="NoticeDTO">
		UPDATE NOTICE SET
			READ_CNT = READ_CNT + 1
		WHERE
			NOTICE_SEQ = #{notice_seq}		
	</update>

	<!-- 게시판 수정 쿼리 -->
	<update id="updateNoticeInfo" parameterType="NoticeDTO">
		UPDATE NOTICE SET
			TITLE = #{title},
			NOTICE_YN = #{notice_yn},
			CONTENTS = #{contents}

		WHERE
			NOTICE_SEQ = #{notice_seq}
	</update>
	<update id="updateComment" parameterType="CommentDTO">
		UPDATE COMMENTS SET
						  CONTENTS = #{contents}

		WHERE
			COMMENT_SEQ = #{comment_seq}
	</update>

	<!-- 게시판 삭제 쿼리 -->
	<delete id="deleteNoticeInfo" parameterType="NoticeDTO">
		DELETE FROM NOTICE
		WHERE NOTICE_SEQ = #{notice_seq}	
			
	</delete>
	<!-- 댓글 삭제 쿼리 -->
	<delete id="deleteComment" parameterType="CommentDTO">
		DELETE FROM COMMENTS
		WHERE COMMENT_SEQ = #{comment_seq}

	</delete>
			
</mapper>